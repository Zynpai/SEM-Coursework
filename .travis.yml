language: java

sudo: false

addons:
  hosts:
    - db

env:
  global:
    # Ensure Google Cloud SDK doesn't prompt for installing.
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

services:
  - docker

install:
  # Build database image.
  - docker build -t database db/.
  # Run the database image.
  - docker run --rm -d -e MYSQL_ROOT_PASSWORD=example -p 33060:3306 database
  # Build and install the application.
  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

before_script:
  # Clean any files.
  - mvn clean

# Job stages
jobs:
  include:
    # Unit test stage.
    - stage: unit tests
      install: skip
      jdk: oraclejdk11
      script: mvn test -Dtest=com.napier.semc.UnitTests
    # Integration test stage.
    - stage: integration tests
      jdk: oraclejdk11
      script: mvn test -Dtest=com.napier.semc.IntegrationTests
    # GitHub release stage.
    - stage: GitHub Release
      install: skip
      jdk: oraclejdk11
      script:
        - echo "Deploying to GitHub Releases"
        # Package the Application.
        - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
      before_deploy:
        # Set our Git user name and email.
        - git config --local user.name "Viktor Malych"
        - git config --local user.email "victormalych@gmail.com"
        # Create unique tag for the commit.
        - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y-%m-%d')-$(git log --format=%h -1)}
        # Tag the commit.
        - git tag $TRAVIS_TAG
      deploy:
        provider: releases
        # Token saved on Travis.
        api_key: "$GITHUB_OAUTH_TOKEN"
        # File to add to the release.
        file: "$TRAVIS_BUILD_DIR/target/seMethods.jar"
        skip_cleanup: true
    - stage: Google Cloud Deploy
      install: skip
      jdk: oraclejdk11
      before_script:
        # Check if Google Cloud SDK is installed.
        - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash
          > /dev/null; fi
        - source $HOME/google-cloud-sdk/path.bash.inc
        # Install Kubernetes control to manage containers
        - gcloud components install kubectl
        - gcloud version
        # Login to our Google Cloud Account using credentials file
        - gcloud auth activate-service-account --key-file client-secret.json
      script:
        # Set the project we will work in.
        - gcloud config set project semcoursework
        # Set the zone to work in.
        - gcloud config set compute/zone europe-west2-b
        # Assign project ID to a variable to make life easier
        - export PROJECT_ID="$(gcloud config get-value project -q)"
        # Authenticate against Google's Docker image manager.
        - gcloud auth configure-docker
        # Build the database image.
        - docker build -t gcr.io/${PROJECT_ID}/db db/.
        # Push the database image.
        - docker push gcr.io/${PROJECT_ID}/db
        # Build the application
        - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
        # Build the application image
        - docker build -t gcr.io/${PROJECT_ID}/app .
        # Push the application image.
        - docker push gcr.io/${PROJECT_ID}/app
        # Build the web image.
        - docker build -t gcr.io/${PROJECT_ID}/web web/.
        # Push the web image.
        - docker push gcr.io/${PROJECT_ID}/web
        # Create a container cluster.  We only need one node.
        - gcloud container clusters create hr-cluster --num-nodes=1
        # Tell kubernetes to run the built database image, opening port 3306
        - kubectl run db --image=gcr.io/${PROJECT_ID}/db --port 3306
        # Expose database service to the rest of the cluster with name db.
        - kubectl expose deployment db --name=db
        # Tell kubernetes to run the build application image, opening port 8080
        - kubectl run app --image=gcr.io/${PROJECT_ID}/app --port 8080
        # Expose the app service
        - kubectl expose deployment app --name=app
        # Tell kubernetes to run the built web image, opening port 80
        - kubectl run web --image=gcr.io/${PROJECT_ID}/web --port 80
        # Expose the web interface, mapping external port 80 to internal port 80
        - kubectl expose deployment web --port=80 --target-port=80 --type=LoadBalancer

stages:
  - unit tests
  - integration tests
  - name: GitHub Release
    if: branch = master
  - name: Google Cloud Deploy
    if: branch = master

after_success:
  # Push code coverage data to codecov.
  - bash <(curl -s https://codecov.io/bash)

before_install:
  # Decrypts the credentials file.
  # The keyname will be different for your project.
  - openssl aes-256-cbc -K $encrypted_41b95063a190_key -iv $encrypted_41b95063a190_iv
    -in client-secret.json.enc -out client-secret.json -d

